// Generated by LiveScript 1.3.0
(function(){
  var EventEmitter, PhoneNumberSource, PhoneNumberSink, expectPhoneNumbers;
  describe('test env', function(){
    return it('works', function(){
      return expect(1).toBe(1);
    });
  });
  EventEmitter = require('events').EventEmitter;
  PhoneNumberSource = (function(superclass){
    var prototype = extend$((import$(PhoneNumberSource, superclass).displayName = 'PhoneNumberSource', PhoneNumberSource), superclass).prototype, constructor = PhoneNumberSource;
    function PhoneNumberSource(phoneNumbers){
      this._phoneNumbers = phoneNumbers;
    }
    prototype.start = function(){
      var self, emitPhoneNumber;
      self = this;
      emitPhoneNumber = function(phoneNumber){
        return setTimeout(function(){
          return self.emit('new-phone-number', phoneNumber);
        }, 1);
      };
      return this._phoneNumbers.forEach(emitPhoneNumber);
    };
    return PhoneNumberSource;
  }(EventEmitter));
  PhoneNumberSink = (function(superclass){
    var prototype = extend$((import$(PhoneNumberSink, superclass).displayName = 'PhoneNumberSink', PhoneNumberSink), superclass).prototype, constructor = PhoneNumberSink;
    function PhoneNumberSink(source){
      this._source = source;
      this._handleSourceEvents();
    }
    prototype._handleSourceEvents = function(){
      var self;
      self = this;
      this._counts = 0;
      return this._source.on('new-phone-number', function(){
        self._counts++;
        return self.emit('update-count', self._counts);
      });
    };
    return PhoneNumberSink;
  }(EventEmitter));
  expectPhoneNumbers = function(expectedNumbers, done){
    var source, actualNumbers;
    source = new PhoneNumberSource(expectedNumbers);
    actualNumbers = [];
    source.on('new-phone-number', function(phoneNumber){
      actualNumbers.push(phoneNumber);
      if (actualNumbers.length === expectedNumbers.length) {
        expect(actualNumbers).toEqual(expectedNumbers);
        return done();
      }
    });
    return source.start();
  };
  describe('phone number source', function(){
    describe('should emit one number', function(){
      it('123', function(done){
        var initialNumbers;
        initialNumbers = [123];
        return expectPhoneNumbers(initialNumbers, done);
      });
      return it('456', function(done){
        var initialNumbers;
        initialNumbers = [456];
        return expectPhoneNumbers(initialNumbers, done);
      });
    });
    return describe('should emit two numbers', function(){
      return it('123, 456', function(done){
        var initialNumbers;
        initialNumbers = [123, 456];
        return expectPhoneNumbers(initialNumbers, done);
      });
    });
  });
  describe('phone number sink', function(){
    it('should count one number', function(done){
      var initialNumbers, source, sink;
      initialNumbers = [123];
      source = new PhoneNumberSource(initialNumbers);
      sink = new PhoneNumberSink(source);
      source.start();
      return sink.on('update-count', function(count){
        expect(count).toBe(1);
        return done();
      });
    });
    return it('should count two number', function(done){
      var initialNumbers, source, sink;
      initialNumbers = [123, 456];
      source = new PhoneNumberSource(initialNumbers);
      sink = new PhoneNumberSink(source);
      source.start();
      return sink.on('update-count', function(count){
        if (count === 2) {
          expect(count).toBe(2);
          return done();
        }
      });
    });
  });
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
